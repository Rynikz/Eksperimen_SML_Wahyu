# -*- coding: utf-8 -*-
"""automate_wahyu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ekw5GM_PPl0C5UPfPmRIGN-X3B3UCRh0
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
import os

def preprocess_data(input_path, output_dir):
    """
    Fungsi ini melakukan semua langkah preprocessing berdasarkan
    struktur data yang sebenarnya, termasuk membuat target dari rasio guru.
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    try:
        df = pd.read_csv(input_path)
    except FileNotFoundError:
        print(f"Error: File tidak ditemukan di path '{input_path}'")
        return None

    df_processed = df.copy()

    # --- LANGKAH 1: MEMBUAT KOLOM TARGET DARI RASIO ---
    total_guru = df_processed['Kepala Sekolah dan Guru(<S1)'] + df_processed['Kepala Sekolah dan Guru(≥ S1)'] + 1e-6
    df_processed['Rasio_Guru_Layak'] = df_processed['Kepala Sekolah dan Guru(≥ S1)'] / total_guru

    threshold = df_processed['Rasio_Guru_Layak'].median()

    df_processed['Status_Kelayakan'] = np.where(df_processed['Rasio_Guru_Layak'] >= threshold, 'Layak', 'Tidak Layak')
    TARGET_COLUMN = 'Status_Kelayakan'

    df_processed.drop(columns=['Rasio_Guru_Layak'], inplace=True)
    print(f"Kolom target '{TARGET_COLUMN}' berhasil dibuat dan kolom rasio sementara telah dihapus.")

    # --- LANGKAH 2: PREPROCESSING LANJUTAN ---

    # Encoding
    le = LabelEncoder()
    df_processed[TARGET_COLUMN] = le.fit_transform(df_processed[TARGET_COLUMN])
    df_processed = pd.get_dummies(df_processed, columns=['Provinsi'], drop_first=True)
    print("Encoding selesai.")

    # Scaling
    features_to_scale = [col for col in df_processed.select_dtypes(include=np.number).columns if col != TARGET_COLUMN]
    scaler = StandardScaler()
    df_processed[features_to_scale] = scaler.fit_transform(df_processed[features_to_scale])
    print("Scaling selesai.")

    # --- LANGKAH 3: MENYIMPAN DATA ---
    output_path = os.path.join(output_dir, 'data_bersih.csv')
    df_processed.to_csv(output_path, index=False)
    print(f"Data bersih berhasil disimpan di: {output_path}")

    return df_processed

if __name__ == "__main__":
    raw_data_path = 'namadataset_raw/kelayakan-pendidikan-indonesia.csv'
    processed_data_dir = 'preprocessing/namadataset_preprocessing'
    preprocess_data(input_path=raw_data_path, output_dir=processed_data_dir)